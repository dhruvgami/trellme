// Generated by CoffeeScript 1.6.3
(function() {
  var LocalStrategy, MailService, Tokens, TrelloApi, TrelloOAuth, TrelloView, Trellos, Users, allowCrossDomain, app, cluster, config, db_users, dbconnection, express, fs, http, i, mailLoop, os, passport, path, server, _, _i;

  os = require('os');

  cluster = require('cluster');

  express = require("express");

  _ = require("underscore");

  fs = require("fs");

  dbconnection = require("./models/dbconnection");

  Users = require("./models/users");

  Tokens = require("./models/tokens");

  Trellos = require('./models/trellos');

  http = require("http");

  path = require("path");

  passport = require("passport");

  LocalStrategy = require("passport-local").Strategy;

  TrelloOAuth = require("./helpers/trello-oauth");

  TrelloApi = require("./helpers/trello-api");

  MailService = require("./helpers/mailservice");

  TrelloView = require("./views/trello-view");

  config = JSON.parse(fs.readFileSync("config/config.json"));

  db_users = new Users();

  allowCrossDomain = function(req, res, next) {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Content-Type');
    if (req.method === 'OPTIONS') {
      return res.send(200);
    } else {
      return next();
    }
  };

  passport.use(new LocalStrategy(function(username, password, done) {
    return process.nextTick(function() {
      return db_users.findByEmail({
        username: username
      }, function(err, user) {
        if (err) {
          return done(err);
        }
        if (!user) {
          return done(null, false, {
            message: "Unknown user " + username
          });
        }
        if (!db_users.verifyPassword(user, password)) {
          return done(null, false, {
            message: "Invalid password"
          });
        }
        return done(null, user);
      });
    });
  }));

  app = express();

  app.configure(function() {
    app.set("port", process.env.PORT || 3000);
    app.use(express.favicon());
    app.use(express.logger("dev"));
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(allowCrossDomain);
    app.use(passport.initialize());
    app.use(app.router);
    return app.use(express["static"](path.join(__dirname, "public")));
  });

  app.configure("development", function() {
    return app.use(express.errorHandler());
  });

  app.post("/app/tokens", function(req, res, next) {
    var _this = this;
    return passport.authenticate("local", {
      session: false
    }, function(err, user, info) {
      var tokens;
      if (err) {
        return next(err);
      }
      if (!user) {
        res.status(401);
        return res.send(null);
      } else {
        tokens = new Tokens();
        return tokens.create(user, function(err, tk) {
          res.status(200);
          return res.json(tk[0]);
        });
      }
    })(req, res, next);
  });

  app["delete"]("/app/tokens/(([A-Za-z0-9_]+))", function(req, res) {
    var tk,
      _this = this;
    console.log(req.body);
    tk = new Tokens();
    return tk.validate(req.params[0], function(err, ok) {
      if (err) {
        res.status(401);
        return res.send("Invalid token or token had expired");
      } else {
        if (ok === null) {
          res.status(401);
          return res.send("Invalid token or token had expired");
        } else {
          return tk["delete"](req.params[0], function(err, wtf) {
            if (err) {
              res.status(err);
              return res.send(wtf);
            } else {
              res.status(200);
              return res.send("You have signed out");
            }
          });
        }
      }
    });
  });

  app.get("/app/login", function(req, res) {
    var login_form;
    login_form = '<form action="/app/tokens" method="post">' + '<div><label>Email:</label><input type="text" name="username"/></div>' + '<div><label>Password:</label><input type="password" name="password"/></div>' + '<div><input type="submit" value="Login"/></div></form>';
    res.status(200);
    return res.send(login_form);
  });

  app.get("/app/logout", function(req, res) {
    var logout_form;
    logout_form = '<form action="/app/tokens" method="post">' + '    <div><label for="token">Token:</label><input type="text" name="token" id="token" /></div>' + '    <input type="submit" value="Logout"/>' + '    <input type="hidden" id="_method" name="_method" value="delete" />' + '</form>';
    res.status(200);
    return res.send(logout_form);
  });

  app.get("/app/signup", function(req, res) {
    var signup_form;
    signup_form = '<form action="/app/users" method="post">' + '    <div><label for="email">Email(loginID):</label><input type="text" name="email" id="email" /></div>' + '    <div><label for="password">Password:</label><input type="password" name="password" id="password" /></div>' + '    <div><label for="trello_username">Trello User Name:</label><input type="text" name="trello_username" id="trello_username" /></div>' + '    <input type="submit" value="Submit"/>' + '</form>';
    return res.send(signup_form);
  });

  app.post("/app/users", function(req, res) {
    var _this = this;
    return db_users.add(req.body, function(err, result) {
      if (err) {
        res.status(err);
        return res.send(result);
      } else {
        res.status(200);
        return res.send("OK");
      }
    });
  });

  app["delete"]("/app/users", function(req, res) {
    var _this = this;
    return (new Tokens()).validate(req.query['token'], function(err, token_record) {
      if (err) {
        res.status(401);
        return res.json(result);
      } else if (!result) {
        res.status(401);
        return res.json("Invalid token.");
      } else {
        return db_users.remove(token_record.user_id, function(err, result) {
          if (err) {
            res.status(err);
            return res.send(result);
          } else {
            res.status(200);
            return res.send("Delete the user");
          }
        });
      }
    });
  });

  app.get("/app/auths/request/(([A-Za-z0-9_\\.\\-@]+))", function(req, res) {
    var _this = this;
    return db_users.findByEmail({
      username: req.params[0]
    }, function(err, user) {
      var toa;
      if (err) {
        res.status(401);
        return res.send("No such user");
      } else {
        toa = new TrelloOAuth(user._id.toString());
        return toa.createOAuth(function(err, oauth) {
          if (err) {
            res.status(err);
            return res.send(oauth);
          } else {
            return toa.requestToken(function(err, redirect_url) {
              if (!err) {
                res.status(302);
                return res.redirect(redirect_url);
              } else {
                res.status(500);
                return res.json(redirect_url);
              }
            });
          }
        });
      }
    });
  });

  app.get("/app/auths/trello_callback", function(req, res) {
    var toa,
      _this = this;
    if (typeof req.query.oauth_verifier !== 'undefined') {
      toa = new TrelloOAuth(req.query.state);
      return toa.createOAuth(function(err, oauth) {
        return toa.callbackCalled(oauth, req.query, function(err, resp) {
          if (err) {
            res.status(500);
            return res.send('<script>window.close();</script>');
          } else {
            res.status(200);
            return res.send('<script>window.close();</script>');
          }
        });
      });
    } else if (typeof req.query.denied !== 'undefined') {
      res.status(200);
      return res.send('<script>window.close();</script>');
    } else {
      res.status(404);
      return res.send('<script>window.close();</script>');
    }
  });

  app.get("/app/auths/status/(([A-Za-z0-9_\\.\\-@]+))", function(req, res) {
    var _this = this;
    return db_users.findByEmail({
      username: req.params[0]
    }, function(err, user) {
      var stat;
      if (err) {
        res.status(401);
        return res.send("No such user");
      } else {
        if (_.isUndefined(users.access_token)) {
          stat = "no";
        } else {
          stat = "yes";
        }
        res.status(200);
        return res.send(stat);
      }
    });
  });

  app["delete"]('/app/auths/delete', function(req, res) {
    return null;
  });

  /*
  # Collect all data test execution API
  # 
  #app.get "/app/trello/report/(([A-Za-z0-9_\\.\\-@]+))", (req, res) ->
  #    db_users.findByEmail {username: req.params[0]}, (err, user)=>    
  #        if err
  #            res.status 404; res.send "No such user"
  #        else
  #            console.log(user)
  #            (new TrelloApi()).collect_data_sync user, (err, result) =>
  #                if err
  #                    res.status err
  #                    res.send result
  #                else
  #                    (new TrelloView()).getSummary user, (err, result) =>
  #                        if err
  #                            res.status 500
  #                            res.send "getSummary failed"
  #                        else
  #                            res.status 200
  #                            res.send result  # html
  #
  # Trash these later
  #app.get "/app/trello/collecttest/(([A-Za-z0-9_\\.\\-@]+))", (req, res) ->
  #    db_users.findByEmail {username: req.params[0]}, (err, user)=>    
  #        if err
  #            res.status 404; res.send "No such user"
  #        else
  #            (new TrelloApi()).collect_data_sync user, (err, result) =>
  #                if err
  #                    res.status err
  #                    res.send result
  #                else
  #                    res.status 200
  #                    res.send result
  #                    
  #app.get "/app/trello/viewtest/(([A-Za-z0-9_\\.\\-@]+))", (req, res) ->
  #    db_users.findByEmail {username: req.params[0]}, (err, user)=>    
  #        if err
  #            res.status 404; res.send "No such user"
  #        else
  #            (new TrelloView()).getSummary user, (err, result) =>
  #                if err
  #                    res.status err
  #                    res.send result
  #                else
  #                    res.status 200
  #                    res.send result  # HTML
  */


  app.get("/app/trello/collect/(([A-Za-z0-9_]+))", function(req, res) {
    var _this = this;
    return (new Tokens()).validate(req.params[0], function(err, tokendoc) {
      if (err) {
        res.status(401);
        return res.json(tokendoc);
      } else if (!tokendoc) {
        res.status(401);
        return res.json("Invalid token.");
      } else {
        return db_users.get2(tokendoc.user_id, function(err, user) {
          if (err) {
            res.status(404);
            return res.send("No such user");
          } else {
            return (new TrelloApi()).collect_data_sync(user, function(err, result) {
              if (err) {
                res.status(err);
                return res.send(result);
              } else {
                res.status(200);
                return res.send(result);
              }
            });
          }
        });
      }
    });
  });

  app.get("/app/trello/view/(([A-Za-z0-9_]+))", function(req, res) {
    var _this = this;
    return (new Tokens()).validate(req.params[0], function(err, tokendoc) {
      if (err) {
        res.status(401);
        return res.json(tokendoc);
      } else if (!tokendoc) {
        res.status(401);
        return res.json("Invalid token.");
      } else {
        return db_users.get2(tokendoc.user_id, function(err, user) {
          if (err) {
            res.status(404);
            return res.send("No such user");
          } else {
            return (new TrelloView()).getSummary(user, function(err, result) {
              if (err) {
                res.status(err);
                return res.send(result);
              } else {
                res.status(200);
                return res.send(result);
              }
            });
          }
        });
      }
    });
  });

  /*
  # For Debugging only
  # 
  #app.get "/app/trello/orgboards/(([A-Za-z0-9_\\.\\-@]+))", (req, res) ->
  #    db_users.findByEmail {username: req.params[0]}, (err, user)=>    
  #        if err
  #            res.status 404; res.send "No such user"
  #        else
  #            #console.log(user)
  #            (new TrelloApi()).get_all_boards (new Trellos()), user, (err, result) =>
  #                if err
  #                    res.status err
  #                    res.send result
  #                else
  #                    res.status 200
  #                    res.send result  # HTML
  */


  app.get("/app/trello/((\\w+))/(([A-Za-z0-9_\\.\\-@]+))", function(req, res) {
    var _this = this;
    return db_users.findByEmail({
      username: req.params[1]
    }, function(err, user) {
      if (err) {
        res.status(404);
        return res.send("No such user");
      } else {
        return (new TrelloApi()).request(req.params[0], user, {}, function(err, result) {
          if (err) {
            res.status(err);
            return res.send(result);
          } else {
            res.status(200);
            return res.send(result);
          }
        });
      }
    });
  });

  mailLoop = function() {
    var mailservice, mloop,
      _this = this;
    mailservice = new MailService();
    return mloop = setInterval(function() {
      console.log('Mailing starting');
      return db_users.findAll(function(err, users) {
        return mailservice.send_report(users);
      });
    }, config.mail_interval);
  };

  if (cluster.isMaster) {
    for (i = _i = 1; _i <= 1; i = ++_i) {
      cluster.fork();
    }
    cluster.on('exit', function(worker, code, signal) {
      var exitCode;
      exitCode = worker.process.exitCode;
      console.log('worker ' + worker.process.pid + ' died (' + exitCode + '). restarting...');
      return cluster.fork();
    });
    cluster.on('online', function(worker) {
      return console.log("worker(" + worker.id + ").online " + worker.process.pid);
    });
    cluster.on('listening', function(worker, address) {
      return console.log("worker(" + worker.id + ").listening " + address.address + ":" + address.port);
    });
    server = http.createServer(app);
    server.listen(app.get('port'));
  } else if (cluster.isWorker) {
    console.log("worker(" + cluster.worker.id + ")");
    if (cluster.worker.id === 1) {
      mailLoop();
    }
  }

}).call(this);
