// Generated by CoffeeScript 1.6.3
(function() {
  var ObjectID, TrelloApi, Trellos, Users, async, config, fs, https, should, _;

  _ = require('underscore');

  fs = require("fs");

  https = require('https');

  Users = require('../models/users');

  Trellos = require('../models/trellos');

  should = require('should');

  ObjectID = require('mongodb').ObjectID;

  async = require('async');

  config = JSON.parse(fs.readFileSync("config/config.json"));

  String.prototype.replaceAll = function(params) {
    return this.replace(/{[^{}]+}/g, function(key) {
      return params[key.replace(/[{}]+/g, "")] || "";
    });
  };

  module.exports = TrelloApi = (function() {
    TrelloApi.host = 'api.trello.com';

    TrelloApi.endpoints = {
      'public_boards': {
        method: 'GET',
        path: '/1/members/{username}/boards?key={key}&token={token}'
      },
      'organizations': {
        method: 'GET',
        path: '/1/members/{username}/organizations?key={key}&token={token}'
      },
      'org_boards': {
        method: 'GET',
        path: '/1/organizations/{orgname}/boards?key={key}&token={token}'
      },
      'all_lists_of_board': {
        method: 'GET',
        path: '/1/boards/{board_id}/lists?key={key}&token={token}'
      },
      'all_cards_of_list': {
        method: 'GET',
        path: '/1/lists/{list_id}/cards?key={key}&token={token}'
      },
      'checklist_of_card': {
        method: 'GET',
        path: '/1/checklists/{checklist_id}?key={key}&token={token}'
      }
    };

    function TrelloApi() {
      this;
    }

    TrelloApi.prototype.request = function(action, userObj, paramObj, fn) {
      var keys, length, opts, params, path, pstr, request;
      console.log(action);
      if (typeof TrelloApi.endpoints[action] === 'undefined') {
        fn(500, "No such action");
      }
      keys = _.keys(paramObj);
      params = {};
      _.each(keys, function(key) {
        return params[key] = paramObj[key];
      });
      should.exist(userObj.trello_username);
      should.exist(userObj.access_token);
      params.username = userObj.trello_username;
      params.key = config.trello.key;
      params.token = userObj.access_token;
      path = TrelloApi.endpoints[action].path.replaceAll(params);
      console.log(path);
      pstr = '';
      length = Buffer.byteLength(pstr, 'utf8');
      opts = {
        host: TrelloApi.host,
        path: path,
        method: TrelloApi.endpoints[action].method,
        headers: {
          'User-Agent': 'My Trello Bot',
          'Accept': 'application/json, Text/javascript, */*; q=0.01',
          'Content-Type': 'application/x-www-form-urlencoded',
          'Content-Length': length
        }
      };
      request = https.request(opts, function(resp) {
        var data;
        resp.setEncoding('utf8');
        data = '';
        resp.on('data', function(chunk) {
          return data += chunk;
        });
        resp.on('end', function() {
          return fn(null, data);
        });
        return resp.on('error', function(e) {
          console.log('error of some kind ' + e);
          return fn(500, 'error');
        });
      });
      request.write(pstr);
      return request.end();
    };

    TrelloApi.prototype._parse = function(json) {
      var err, obj;
      try {
        obj = JSON.parse(json);
      } catch (_error) {
        err = _error;
        console.log('JSON Parse Error ' + json);
        obj = {};
      }
      return obj;
    };

    TrelloApi.prototype.get_all_boards = function(db, userObj, fn) {
      var _this = this;
      return this.request('organizations', userObj, {}, function(err, json) {
        var allboards, orgs, uid;
        if (err) {
          return fn(500, json);
        }
        orgs = _this._parse(json);
        uid = new ObjectID(userObj._id.toString());
        allboards = [];
        return async.each(orgs, function(org, cb) {
          return _this.request('org_boards', userObj, {
            orgname: org.name
          }, function(err, json) {
            var boards;
            boards = _this._parse(json);
            return async.each(boards, function(board, cb1) {
              var bb;
              bb = _.find(allboards, function(bd) {
                return board.id === bd.id;
              });
              if (typeof bb === 'undefined') {
                allboards.push(board);
              }
              return cb1(null);
            }, function(err) {
              return db.save_boards(uid, org.name, boards, function(err, wtf) {
                if (err) {
                  return fn(500, wtf);
                }
                return cb(null);
              });
            });
          });
        }, function(err) {
          return _this.request('public_boards', userObj, {}, function(err, json) {
            var boards;
            if (err) {
              return fn(500, json);
            }
            boards = _this._parse(json);
            return async.each(boards, function(board, cb2) {
              var bb;
              bb = _.find(allboards, function(bd) {
                return board.id === bd.id;
              });
              if (typeof bb === 'undefined') {
                allboards.push(board);
              }
              return cb2(null);
            }, function(err) {
              return db.save_boards(uid, "public", boards, function(err, wtf) {
                if (err) {
                  return fn(500, wtf);
                }
                return fn(null, allboards);
              });
            });
          });
        });
      });
    };

    TrelloApi.prototype.get_public_boards = function(db, userObj, fn) {
      var _this = this;
      return this.request('public_boards', userObj, {}, function(err, json) {
        var boards, uid;
        if (err) {
          return fn(500, json);
        }
        boards = _this._parse(json);
        uid = new ObjectID(userObj._id.toString());
        return db.save_boards(uid, "public", boards, function(err, wtf) {
          if (err) {
            return fn(500, wtf);
          }
          return fn(null, boards);
        });
      });
    };

    TrelloApi.prototype.get_all_lists_of_board = function(db, userObj, board, fn) {
      var _this = this;
      return this.request('all_lists_of_board', userObj, {
        board_id: board.id
      }, function(err, json) {
        var lists, uid;
        if (err) {
          return fn(500, json);
        }
        lists = _this._parse(json);
        uid = new ObjectID(userObj._id.toString());
        return db.save_lists(uid, board.id, lists, function(err, wtf) {
          if (err) {
            return fn(500, wtf);
          }
          return fn(null, lists);
        });
      });
    };

    TrelloApi.prototype.get_all_cards_of_list = function(db, userObj, board_id, list, fn) {
      var _this = this;
      return this.request('all_cards_of_list', userObj, {
        list_id: list.id
      }, function(err, json) {
        var cards, uid;
        if (err) {
          return fn(500, json);
        }
        cards = _this._parse(json);
        uid = new ObjectID(userObj._id.toString());
        return db.save_cards(uid, board_id, list.id, cards, function(err, wtf) {
          if (err) {
            return fn(500, wtf);
          }
          return fn(null, cards);
        });
      });
    };

    TrelloApi.prototype.get_checklist_of_card = function(db, userObj, board_id, list_id, card_id, checklistid, fn) {
      var _this = this;
      return this.request('checklist_of_card', userObj, {
        checklist_id: checklistid
      }, function(err, json) {
        var checklists, uid;
        if (err) {
          return fn(500, json);
        }
        checklists = _this._parse(json);
        uid = new ObjectID(userObj._id.toString());
        return db.save_checklists(uid, board_id, list_id, card_id, checklists, function(err, wtf) {
          if (err) {
            return fn(500, wtf);
          }
          return fn(null, checklists);
        });
      });
    };

    TrelloApi.prototype.collect_data_sync = function(userObj, fn) {
      var db, uid,
        _this = this;
      db = new Trellos();
      uid = new ObjectID(userObj._id.toString());
      return db.clear_all(uid, function(err, wtf) {
        if (err) {
          return fn(500, wtf);
        }
        return _this.get_all_boards(db, userObj, function(err, boards) {
          return async.each(boards, function(board, cb1) {
            return _this.get_all_lists_of_board(db, userObj, board, function(err, lists) {
              return async.each(lists, function(list, cb2) {
                return _this.get_all_cards_of_list(db, userObj, board.id, list, function(err, cards) {
                  return async.eachSeries(cards, function(card, cb3) {
                    return async.each(card.idChecklists, function(checklistid, cb4) {
                      return _this.get_checklist_of_card(db, userObj, "0", "0", card.id, checklistid, function(err, checklist) {
                        return cb4(null);
                      });
                    }, function(err) {
                      return cb3(null);
                    });
                  }, function(err) {
                    return cb2(null);
                  });
                });
              }, function(err) {
                return cb1(null);
              });
            });
          }, function(err) {
            return fn(null, 'all good');
          });
        });
      });
    };

    return TrelloApi;

  })();

}).call(this);
