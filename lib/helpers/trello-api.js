// Generated by CoffeeScript 1.6.3
(function() {
  var ObjectID, TrelloApi, Trellos, Users, config, fs, https, should, _;

  _ = require('underscore');

  fs = require("fs");

  https = require('https');

  Users = require('../models/users');

  Trellos = require('../models/trellos');

  should = require('should');

  ObjectID = require('mongodb').ObjectID;

  config = JSON.parse(fs.readFileSync("config/config.json"));

  String.prototype.replaceAll = function(params) {
    return this.replace(/{[^{}]+}/g, function(key) {
      return params[key.replace(/[{}]+/g, "")] || "";
    });
  };

  module.exports = TrelloApi = (function() {
    TrelloApi.host = 'api.trello.com';

    TrelloApi.endpoints = {
      'public_boards': {
        method: 'GET',
        path: '/1/members/{username}/boards?key={key}&token={token}'
      },
      'organizations': {
        method: 'GET',
        path: '/1/members/{username}/organizations?key={key}&token={token}'
      },
      'org_boards': {
        method: 'GET',
        path: '/1/organizations/mindsburgh1/boards?key={key}&token={token}'
      },
      'all_lists_of_board': {
        method: 'GET',
        path: '/1/boards/{board_id}/lists?key={key}&token={token}'
      },
      'all_cards_of_list': {
        method: 'GET',
        path: '/1/lists/{list_id}/cards?key={key}&token={token}'
      },
      'checklist_of_card': {
        method: 'GET',
        path: '/1/checklists/{checklist_id}?key={key}&token={token}'
      }
    };

    function TrelloApi() {
      this;
    }

    TrelloApi.prototype.request = function(action, userObj, paramObj, fn) {
      var keys, length, opts, params, path, pstr, request;
      console.log(action);
      keys = _.keys(paramObj);
      params = {};
      _.each(keys, function(key) {
        return params[key] = paramObj[key];
      });
      should.exist(userObj.trello_username);
      should.exist(userObj.access_token);
      params.username = userObj.trello_username;
      params.key = config.trello.key;
      params.token = userObj.access_token;
      path = TrelloApi.endpoints[action].path.replaceAll(params);
      console.log(path);
      pstr = '';
      length = Buffer.byteLength(pstr, 'utf8');
      opts = {
        host: TrelloApi.host,
        path: path,
        method: TrelloApi.endpoints[action].method,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.75 Safari/535.7',
          'Accept': 'application/json, text/javascript, */*; q=0.01',
          'Content-Type': 'application/x-www-form-urlencoded',
          'Content-Length': length
        }
      };
      request = https.request(opts, function(resp) {
        var data;
        resp.setEncoding('utf8');
        data = '';
        resp.on('data', function(chunk) {
          return data += chunk;
        });
        resp.on('end', function() {
          return fn(null, data);
        });
        return resp.on('error', function(e) {
          console.log('error of some kind ' + e);
          return fn(500, 'error');
        });
      });
      request.write(pstr);
      return request.end();
    };

    TrelloApi.prototype._parse = function(json) {
      var err, obj;
      try {
        obj = JSON.parse(json);
      } catch (_error) {
        err = _error;
        console.log('JSON Parse Error ' + json);
        obj = {};
      }
      return obj;
    };

    TrelloApi.prototype.collect_data = function(userObj, fn) {
      var db_trellos, uid,
        _this = this;
      db_trellos = new Trellos();
      uid = new ObjectID(userObj._id.toString());
      return db_trellos.clear_all(uid, function(err, wtf) {
        if (err) {
          return fn(500, wtf);
        }
        return _this.request('public_boards', userObj, {}, function(err, json) {
          var boards;
          if (err) {
            return fn(500, json);
          }
          boards = _this._parse(json);
          return db_trellos.save_boards(uid, boards, function(err, wtf) {
            if (err) {
              return fn(500, wtf);
            }
            boards.push('end');
            return _.each(boards, function(board) {
              if (board === 'end') {
                return fn(null, 'all good');
              }
              return _this.request('all_lists_of_board', userObj, {
                board_id: board.id
              }, function(err, json) {
                var lists;
                if (err) {
                  return fn(500, json);
                }
                lists = _this._parse(json);
                return db_trellos.save_lists(uid, board.id, lists, function(err, wtf) {
                  if (err) {
                    return fn(500, wtf);
                  }
                  return _.each(lists, function(list) {
                    return _this.request('all_cards_of_list', userObj, {
                      list_id: list.id
                    }, function(err, json) {
                      var cards;
                      if (err) {
                        return fn(500, json);
                      }
                      cards = _this._parse(json);
                      return db_trellos.save_cards(uid, board.id, list.id, cards, function(err, wtf) {
                        if (err) {
                          return fn(500, wtf);
                        }
                        return _.each(cards, function(card) {
                          return _.each(card.idChecklists, function(checklistid) {
                            return _this.request('checklist_of_card', userObj, {
                              checklist_id: checklistid
                            }, function(err, json) {
                              var checklists;
                              if (err) {
                                return fn(500, json);
                              }
                              checklists = _this._parse(json);
                              return db_trellos.save_checklists(uid, board.id, list.id, card.id, checklists, function(err, wtf) {
                                if (err) {
                                  return fn(500, wtf);
                                }
                              });
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    };

    return TrelloApi;

  })();

  /*
  #
  # Organizations
  https://trello.com/1/members/justincase2/organizations?key=80e7f11a72d431dee0e0db0a52631180&token=992ca020fe40cb9321cd95e988cd0d43d86ec3a8e78d139d39ce053c464245f4
  #
  # 
  # Users database entry
  { "_id" : ObjectId("51b7e5ebfe8ae46384314ad2"), "access_token" : "7ec5ebd613019a6e5483c88a7eb176382a087e1fe806cd6be94dac29f1e7cbb5", "access_token_secret" : "b40765b097e0669e8673cfe1f7936b2f", "email" : "test1@gmail.com", "password" : "123456", "token_secret" : "48439721d88765dc37373f72d9a06cfb" }
  
  # To get all boards of mine key={developer key} token={users.access_token}
  https://api.trello.com/1/member/yoshi1/boards?key=80e7f11a72d431dee0e0db0a52631180&token=7ec5ebd613019a6e5483c88a7eb176382a087e1fe806cd6be94dac29f1e7cbb5
  # 
  # TO get all cards of a board
  https://api.trello.com/1/boards/518078ad821ecf8371001122/cards?key=80e7f11a72d431dee0e0db0a52631180&token=7ec5ebd613019a6e5483c88a7eb176382a087e1fe806cd6be94dac29f1e7cbb5
  
  #Test "allboards" action
  http://localhost:3000/app/trello/allboards/test1@yahoo.com
  
  Sample All Board data
  [{"id":"50dd7d5b2ef409fa0100128c","name":"Welcome Board","desc":"","closed":false,"idOrganization":null,"invited":false,"pinned":true,"url":"https://trello.com/board/welcome-board/50dd7d5b2ef409fa0100128c","prefs":{"permissionLevel":"private","voting":"members","comments":"members","invitations":"members","selfJoin":false,"cardCovers":true,"canBePublic":true,"canBeOrg":true,"canBePrivate":true,"canInvite":true},"invitations":[],"memberships":[{"id":"50dd7d5b2ef409fa0100128d","idMember":"4e6a7fad05d98b02ba00845c","memberType":"normal","deactivated":false,"unconfirmed":false},{"id":"50dd7d5b2ef409fa01001298","idMember":"50dd7d5b2ef409fa0100128b","memberType":"admin","deactivated":false,"unconfirmed":false}],"shortUrl":"https://trello.com/b/REDaVbxb","subscribed":false,"labelNames":{"red":"","orange":"","yellow":"","green":"","blue":"","purple":""}},
  {"id":"516d20677790e4c568001856","name":"WiseHive Test","desc":"","closed":false,"idOrganization":null,"invited":false,"pinned":true,"url":"https://trello.com/board/wisehive-test/516d20677790e4c568001856","prefs":{"permissionLevel":"private","voting":"members","comments":"members","invitations":"members","selfJoin":false,"cardCovers":true,"canBePublic":true,"canBeOrg":true,"canBePrivate":true,"canInvite":true},"invitations":[],"memberships":[{"id":"516d20677790e4c56800185a","idMember":"50dd7d5b2ef409fa0100128b","memberType":"admin","deactivated":false,"unconfirmed":false}],"shortUrl":"https://trello.com/b/TLLVLDSP","subscribed":false,"labelNames":{"yellow":"","red":"","purple":"","orange":"","green":"Task","blue":""}},
  {"id":"518078ad821ecf8371001122","name":"Yastrology Builds","desc":"","closed":false,"idOrganization":null,"invited":false,"pinned":true,"url":"https://trello.com/board/yastrology-builds/518078ad821ecf8371001122","prefs":{"permissionLevel":"private","voting":"members","comments":"members","invitations":"members","selfJoin":false,"cardCovers":true,"canBePublic":true,"canBeOrg":true,"canBePrivate":true,"canInvite":true},"invitations":[],"memberships":[{"id":"518078ad821ecf8371001126","idMember":"50dd7d5b2ef409fa0100128b","memberType":"admin","deactivated":false,"unconfirmed":false},{"id":"51807d85d6b8609871002cfe","idMember":"51807d85d6b8609871002ca2","memberType":"normal","deactivated":false,"unconfirmed":false},{"id":"5180f4250f8105f80c00356a","idMember":"5180f4240f8105f80c00350e","memberType":"normal","deactivated":false,"unconfirmed":false}],"shortUrl":"https://trello.com/b/S9ZtwHYW","subscribed":false,"labelNames":{"yellow":"Task","red":"Bug fix","purple":"Discussion","orange":"New feature","green":"Info","blue":""}}]
  */


}).call(this);
