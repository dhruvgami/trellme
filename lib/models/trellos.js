// Generated by CoffeeScript 1.6.3
(function() {
  var ObjectID, Trellos, dbconnection, mongodb, should,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  mongodb = require('mongodb');

  ObjectID = require('mongodb').ObjectID;

  dbconnection = require('./dbconnection');

  should = require('should');

  module.exports = Trellos = (function(_super) {
    __extends(Trellos, _super);

    function Trellos() {
      Trellos.__super__.constructor.call(this);
    }

    Trellos.prototype.clear_all = function(uid, fn) {
      var _this = this;
      return dbconnection.get_client(function(err, p_client) {
        return p_client.collection('checklists', function(err, col) {
          return col.remove({
            user_id: uid
          }, function(err, resp) {
            if (err) {
              return fn(500, "Failed to remove checklists for user " + user_id);
            }
            return p_client.collection('cards', function(err, col) {
              return col.remove({
                user_id: uid
              }, function(err, resp) {
                if (err) {
                  return fn(500, "Failed to remove cards for user " + user_id);
                }
                return p_client.collection('lists', function(err, col) {
                  return col.remove({
                    user_id: uid
                  }, function(err, resp) {
                    if (err) {
                      return fn(500, "Failed to remove lists for user " + user_id);
                    }
                    return p_client.collection('boards', function(err, col) {
                      return col.remove({
                        user_id: uid
                      }, function(err, resp) {
                        if (err) {
                          return fn(500, "Failed to remove boards for user " + user_id);
                        }
                        return fn(null, "Cleared everything");
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    };

    Trellos.prototype.save_boards = function(user_id, boards, fn) {
      var _this = this;
      return dbconnection.get_client(function(err, p_client) {
        return p_client.collection('boards', function(err, col) {
          if (err) {
            return fn(500, null);
          }
          return col.insert({
            user_id: user_id,
            boards: boards
          }, function(err) {
            if (err) {
              return fn(500, "Insert failed");
            } else {
              return fn(null, "save board success");
            }
          });
        });
      });
    };

    Trellos.prototype.save_lists = function(user_id, board_id, lists, fn) {
      var _this = this;
      return dbconnection.get_client(function(err, p_client) {
        return p_client.collection('lists', function(err, col) {
          if (err) {
            return fn(500, null);
          }
          return col.insert({
            user_id: user_id,
            board_id: board_id,
            lists: lists
          }, function(err) {
            if (err) {
              return fn(500, null);
            } else {
              return fn(null, "save lists success");
            }
          });
        });
      });
    };

    Trellos.prototype.save_cards = function(user_id, board_id, list_id, cards, fn) {
      var _this = this;
      return dbconnection.get_client(function(err, p_client) {
        return p_client.collection('cards', function(err, col) {
          if (err) {
            return fn(500, null);
          }
          return col.insert({
            user_id: user_id,
            board_id: board_id,
            list_id: list_id,
            cards: cards
          }, function(err) {
            if (err) {
              return fn(500, null);
            } else {
              return fn(null, "save cards success");
            }
          });
        });
      });
    };

    Trellos.prototype.save_checklists = function(user_id, board_id, list_id, card_id, checklists, fn) {
      var _this = this;
      return dbconnection.get_client(function(err, p_client) {
        return p_client.collection('checklists', function(err, col) {
          if (err) {
            return fn(500, null);
          }
          return col.insert({
            user_id: user_id,
            board_id: board_id,
            list_id: list_id,
            card_id: card_id,
            checklists: checklists
          }, function(err) {
            if (err) {
              return fn(500, null);
            } else {
              return fn(null, "save checklists success");
            }
          });
        });
      });
    };

    Trellos.prototype.get_boards = function(user_id, fn) {
      var _this = this;
      return dbconnection.get_client(function(err, p_client) {
        return p_client.collection('boards', function(err, col) {
          if (err) {
            fn(err, null);
            return;
          }
          return col.findOne({
            user_id: user_id
          }, function(err, result) {
            return fn(err, result);
          });
        });
      });
    };

    Trellos.prototype.get_lists_of_board = function(user_id, board_id, fn) {
      var _this = this;
      return dbconnection.get_client(function(err, p_client) {
        return p_client.collection('lists', function(err, col) {
          if (err) {
            fn(err, null);
            return;
          }
          return col.findOne({
            user_id: user_id,
            board_id: board_id
          }, function(err, result) {
            return fn(err, result);
          });
        });
      });
    };

    Trellos.prototype.get_cards_of_list = function(user_id, list_id, fn) {
      var _this = this;
      return dbconnection.get_client(function(err, p_client) {
        return p_client.collection('cards', function(err, col) {
          if (err) {
            fn(err, null);
            return;
          }
          return col.findOne({
            user_id: user_id,
            list_id: list_id
          }, function(err, result) {
            return fn(err, result);
          });
        });
      });
    };

    return Trellos;

  })(dbconnection);

}).call(this);
