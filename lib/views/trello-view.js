// Generated by CoffeeScript 1.6.3
(function() {
  var ObjectID, TrelloView, Trellos, async, fs, handlebars, should, _;

  fs = require('fs');

  _ = require('underscore');

  ObjectID = require('mongodb').ObjectID;

  should = require('should');

  handlebars = require('handlebars');

  async = require('async');

  Trellos = require('../models/trellos');

  module.exports = TrelloView = (function() {
    TrelloView.templates = {
      board: {
        path: 'templates/boards.tmpl',
        template: null
      },
      list: {
        path: 'templates/lists.tmpl',
        template: null
      },
      card: {
        path: 'templates/cards.tmpl',
        template: null
      },
      checklist: {
        path: 'templates/checklists.tmpl',
        template: null
      },
      checkitem: {
        path: 'templates/checkitems.tmpl',
        template: null
      }
    };

    TrelloView.template_compiled = false;

    function TrelloView() {
      var keys,
        _this = this;
      if (TrelloView.template_compiled !== true) {
        keys = _.keys(TrelloView.templates);
        _.each(keys, function(key) {
          var tmpl;
          tmpl = fs.readFileSync(__dirname + '/' + TrelloView.templates[key].path);
          return TrelloView.templates[key].template = handlebars.compile(tmpl.toString());
        });
        TrelloView.template_compiled = true;
      }
    }

    TrelloView.prototype.get_all_data = function(trellos, user_id, fn) {
      var all,
        _this = this;
      all = {};
      return async.parallel({
        boards: function(cb) {
          return trellos.get_boards(user_id, function(err, myboards) {
            if (err) {
              return cb(500, 'Couldnt read data');
            } else {
              all.boards = myboards;
              return cb(null, 1);
            }
          });
        },
        lists: function(cb) {
          return trellos.get_all_lists(user_id, function(err, mylists) {
            if (err) {
              return cb(500, 'Couldnt read data');
            } else {
              all.lists = mylists;
              return cb(null, 2);
            }
          });
        },
        cards: function(cb) {
          return trellos.get_all_cards(user_id, function(err, mycards) {
            if (err) {
              return cb(500, 'Couldnt read data');
            } else {
              all.cards = mycards;
              return cb(null, 3);
            }
          });
        },
        checklists: function(cb) {
          return trellos.get_all_checklists(user_id, function(err, mychecklists) {
            if (err) {
              return cb(500, 'Couldnt read data');
            } else {
              all.checklists = mychecklists;
              return cb(null, 4);
            }
          });
        },
        members: function(cb) {
          return trellos.get_all_members(user_id, function(err, mymembers) {
            if (err) {
              return cb(500, 'Couldnt read data');
            } else {
              all.members = mymembers;
              return cb(null, 5);
            }
          });
        }
      }, function(err, results) {
        console.log(results);
        return fn(null, all);
      });
    };

    TrelloView.prototype.renderHtml = function(trellos, user_id, fn) {
      var htmls,
        _this = this;
      htmls = [];
      return this.get_all_data(trellos, user_id, function(err, all) {
        var ret;
        if (err) {
          return fn(500, all);
        } else {
          htmls = [];
          _.each(all.boards, function(boardx) {
            var board, list, listhtmls;
            board = boardx.boards;
            list = _.find(all.lists, function(list) {
              return list.board_id === board.id;
            });
            listhtmls = [];
            if (!list) {
              list = [];
            }
            _.each(list.lists, function(ll) {
              var cardhtmls, cards1, listhtml;
              cards1 = _.find(all.cards, function(cards) {
                return cards.list_id === ll.id;
              });
              if (cards1) {
                cardhtmls = [];
                _.each(cards1.cards, function(cccard) {
                  var cardhtml, clhtmls, cls, labels, member_names;
                  labels = [];
                  _.each(cccard.labels, function(label) {
                    return labels.push(label.name);
                  });
                  cccard.labels = labels.join(', ');
                  if (0 < cccard.idMembers.length) {
                    member_names = [];
                    _.each(cccard.idMembers, function(mem_id) {
                      var m;
                      m = _.find(all.members, function(mem) {
                        return mem_id === mem.member_id;
                      });
                      return member_names.push(m.name);
                    });
                    cccard.members = member_names.join(',');
                  }
                  cls = _.filter(all.checklists, function(cl) {
                    return cl.card_id === cccard.id;
                  });
                  clhtmls = [];
                  _.each(cls, function(cl) {
                    var cihtml, cihtmls, clhtml,
                      _this = this;
                    cihtmls = [];
                    _.each(cl.checklists.checkItems, function(ci) {
                      var cihtml;
                      cihtml = TrelloView.templates.checkitem.template(ci);
                      return cihtmls.push(cihtml);
                    });
                    cihtml = cihtmls.join("\n");
                    cl.checklists.checkItems = cihtml;
                    clhtml = TrelloView.templates.checklist.template(cl.checklists);
                    return clhtmls.push(clhtml);
                  });
                  cccard.closed = cccard.closed === false ? 'NO' : 'YES';
                  cccard.checklists = clhtmls.join("\n");
                  cardhtml = TrelloView.templates.card.template(cccard);
                  return cardhtmls.push(cardhtml);
                });
                ll.cards = cardhtmls.join("\n");
              }
              listhtml = TrelloView.templates.list.template(ll);
              return listhtmls.push(listhtml);
            });
            board.lists = listhtmls.join("\n");
            return htmls.push(TrelloView.templates.board.template(board));
          });
          ret = htmls.join("\n");
          return fn(null, ret);
        }
      });
    };

    TrelloView.prototype.getSummary = function(user, fn) {
      var trellos;
      trellos = new Trellos();
      return this.renderHtml(trellos, new ObjectID(user._id.toString()), fn);
    };

    return TrelloView;

  })();

}).call(this);
