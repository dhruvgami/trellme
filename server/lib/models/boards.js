// Generated by CoffeeScript 1.6.3
(function() {
  var Boards, ObjectID, db, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ObjectID = require('mongodb').ObjectID;

  db = require('./dbconnection');

  module.exports = Boards = (function(_super) {
    __extends(Boards, _super);

    function Boards() {
      _ref = Boards.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Boards.colName = 'boards';

    Boards.findByUserId = function(userId, cb) {
      if (typeof userId === 'string') {
        userId = new ObjectID(userId);
      }
      return this.collection(function(err, col) {
        if (err) {
          return cb(err, null);
        }
        return col.find({
          user_id: userId
        }).toArray(cb);
      });
    };

    Boards.findEnabledByUserId = function(userId, cb) {
      if (typeof userId === 'string') {
        userId = new ObjectID(userId);
      }
      return this.collection(function(err, col) {
        if (err) {
          return cb(err, null);
        }
        return col.find({
          user_id: userId,
          enabled: true
        }).toArray(cb);
      });
    };

    Boards.updateBoard = function(boardId, attrs, cb) {
      if (typeof boardId === 'string') {
        boardId = new ObjectID(boardId);
      }
      return this.collection(function(err, col) {
        if (err) {
          return cb(err, null);
        }
        return col.findAndModify({
          _id: boardId
        }, null, {
          $set: attrs
        }, {
          "new": true
        }, cb);
      });
    };

    return Boards;

  })(db);

}).call(this);
