// Generated by CoffeeScript 1.6.3
(function() {
  var ObjectID, TrelloView, Trellos, fs, handlebars, should, sugar, _;

  fs = require('fs');

  _ = require('underscore');

  ObjectID = require('mongodb').ObjectID;

  should = require('should');

  handlebars = require('handlebars');

  Trellos = require('../models/trellos');

  sugar = require('sugar');

  Date.prototype.sameDateAs = function(pDate) {
    return (this.getFullYear() === pDate.getFullYear()) && (this.getMonth() === pDate.getMonth()) && (this.getDate() === pDate.getDate());
  };

  module.exports = TrelloView = (function() {
    TrelloView.templates = {
      duecard: {
        path: 'templates/duecard.tmpl',
        template: null
      },
      list_table: {
        path: 'templates/list-tabular.tmpl',
        template: null
      },
      list_table_nocard: {
        path: 'templates/list-tabular-nocard.tmpl',
        template: null
      },
      list_row: {
        path: 'templates/list-row.tmpl',
        template: null
      },
      action: {
        path: 'templates/actions.tmpl',
        template: null
      }
    };

    TrelloView.template_compiled = false;

    function TrelloView() {
      var keys,
        _this = this;
      if (TrelloView.template_compiled !== true) {
        keys = _.keys(TrelloView.templates);
        _.each(keys, function(key) {
          var tmpl;
          tmpl = fs.readFileSync(__dirname + '/' + TrelloView.templates[key].path);
          return TrelloView.templates[key].template = handlebars.compile(tmpl.toString());
        });
        TrelloView.template_compiled = true;
      }
    }

    TrelloView.prototype.collect_cards_per_due = function(all_cards, tzdiff) {
      var cardids,
        _this = this;
      cardids = {
        past: [],
        today: [],
        soon: []
      };
      _.each(all_cards, function(cards) {
        return _.each(cards.cards, function(card) {
          var days_diff, due, now;
          if (card.due) {
            due = new Date(card.due);
            now = new Date();
            days_diff = (due - now) / 86400000;
            if (due.sameDateAs(now)) {
              return cardids.today.push(card.id);
            } else {
              if (days_diff < 0) {
                return cardids.past.push(card.id);
              } else if (days_diff < 7) {
                return cardids.soon.push(card.id);
              }
            }
          }
        });
      });
      return cardids;
    };

    TrelloView.prototype.all_org_names = function(alldata) {
      var orgs,
        _this = this;
      orgs = _.map(alldata.boards, function(board) {
        return board.org_name;
      });
      return _.uniq(orgs);
    };

    TrelloView.prototype.lookup_card_by_id = function(alldata, card_id) {
      var cards, cr,
        _this = this;
      cr = null;
      cards = _.find(alldata.cards, function(cards) {
        cr = _.find(cards.cards, function(card) {
          return card.id === card_id;
        });
        return !_.isUndefined(cr);
      });
      return [cards, cr];
    };

    TrelloView.prototype.lookup_cards_by_listid = function(alldata, list_id) {
      var cards, cr,
        _this = this;
      cr = null;
      cards = _.find(alldata.cards, function(cards) {
        return cards.list_id === list_id;
      });
      return cards;
    };

    TrelloView.prototype.lookup_board_by_id = function(alldata, board_id) {
      var bd;
      bd = _.find(alldata.boards, function(board) {
        return board.boards.id === board_id;
      });
      return bd;
    };

    TrelloView.prototype.lookup_list_by_id = function(alldata, board_id, list_id) {
      var lists, lst,
        _this = this;
      lst = null;
      lists = _.find(alldata.lists, function(list) {
        lst = null;
        if (list.board_id === board_id) {
          lst = _.find(list.lists, function(lst) {
            return lst.id === list_id;
          });
        }
        return lst !== null && !_.isUndefined(lst);
      });
      return [lists, lst];
    };

    TrelloView.prototype.card_member = function(alldata, card) {
      var member_names, members,
        _this = this;
      if (0 < card.idMembers.length) {
        member_names = [];
        _.each(card.idMembers, function(mem_id) {
          var m;
          m = _.find(alldata.members, function(mem) {
            return mem_id === mem.member_id;
          });
          return member_names.push(m.name);
        });
        return members = member_names.join(',');
      } else {
        return 'None';
      }
    };

    TrelloView.prototype.list_cards_dueform = function(alldata, cardids, tzdiff, fn) {
      var htmls,
        _this = this;
      htmls = [];
      _.each(cardids, function(card_id) {
        var aboard, acard, alist, context, due, duedate, members;
        acard = _this.lookup_card_by_id(alldata, card_id);
        aboard = _this.lookup_board_by_id(alldata, acard[0].board_id);
        alist = _this.lookup_list_by_id(alldata, acard[0].board_id, acard[0].list_id);
        members = _this.card_member(alldata, acard[1]);
        due = Date.create(acard[1].due).addHours(tzdiff);
        duedate = due.format("{Mon} {d}, {yyyy} at {h}:{mm} {TT}");
        context = {
          board_name: aboard.boards.name,
          board_url: aboard.boards.url,
          org_name: aboard.org_name,
          list_name: alist[1].name,
          list_url: "",
          card_name: acard[1].name,
          card_url: acard[1].url,
          due: duedate,
          assigned_to: members
        };
        return htmls.push(TrelloView.templates.duecard.template(context));
      });
      if (cardids.length === 0) {
        htmls.push('<div>No Cards</div>');
      }
      return htmls.join('<br>\n');
    };

    TrelloView.prototype.list_tabular = function(alldata, lists, tzdiff) {
      var html, rows, tables,
        _this = this;
      tables = [];
      rows = [];
      _.each(lists.lists, function(list) {
        var cards, trs;
        cards = _this.lookup_cards_by_listid(alldata, list.id);
        if (!_.isUndefined(cards)) {
          _.each(cards.cards, function(card) {
            var context, duedate;
            if (card.due) {
              duedate = (Date.create(card.due)).addHours(tzdiff).format("{Mon} {d}, {h}:{mm} {TT}");
            } else {
              duedate = "None";
            }
            context = {
              card_name: card.name,
              assigned_to: _this.card_member(alldata, card),
              due_short: duedate,
              comments: card.badges.comments.toString()
            };
            return rows.push(TrelloView.templates.list_row.template(context));
          });
          trs = rows.join('\n');
          rows = [];
          return tables.push(TrelloView.templates.list_table.template({
            list_name: list.name,
            rows: trs
          }));
        } else {
          return tables.push(TrelloView.templates.list_table_nocard.template({
            list_name: list.name
          }));
        }
      });
      return html = tables.join('\n');
    };

    TrelloView.prototype.render_action = function(action, tzdiff) {
      var actionText, actiondate, adate, context, err, logtext;
      try {
        adate = Date.create(action.date).addHours(tzdiff);
        actiondate = adate.format("{Mon} {d}, {yyyy} at {h}:{mm} {TT}");
        if (action.type === "updateCard") {
          actionText = "updated " + action.data.card.name;
        } else if (action.type === "createCard") {
          actionText = "added " + action.data.card.name + " to " + action.data.list.name;
        } else if (action.type === "createBoard") {
          actionText = "created this board.";
        } else if (action.type === "commentCard") {
          actionText = "commented on " + action.data.card.name + ", saying " + action.data.text;
        } else if (action.type === "addMemberToCard") {
          actionText = "added " + action.member.fullName + " to " + action.data.card.name;
        } else if (action.type === "removeMemberFromCard") {
          actionText = "removed " + action.member.fullName + " from " + action.data.card.name;
        } else if (action.type === "updateBoard") {
          actionText = "updated " + action.data.board.name;
        } else if (action.type === "createList") {
          actionText = "created list " + action.data.list.name;
        } else if (action.type === "moveCardToBoard") {
          actionText = "moved " + action.data.card.name + " from " + action.data.boardSource.name + " to " + action.data.board.name;
        } else if (action.type === "addAttachmentToCard") {
          actionText = "added an attachment to " + action.data.card.name;
        } else if (action.type === "addChecklistToCard") {
          actionText = "added a Checklist to " + action.data.card.name;
        } else if (action.type === "addMemberToBoard") {
          actionText = "added a member to " + action.data.board.name;
        } else {
          actionText = "took an action";
        }
        context = {
          full_name: action.memberCreator.fullName,
          action: actionText,
          date: adate.format("{Mon} {d}, {yyyy} {h}:{mm} {TT}")
        };
        return TrelloView.templates.action.template(context);
      } catch (_error) {
        err = _error;
        logtext = "Exception in TrelloView.prototype.render_actions\n";
        if (action.type) {
          logtext += "Action Type = " + action.type + "\n";
        }
        if (action.data.board.name) {
          logtext += "Board Name = " + action.data.board.name + "\n";
        }
        if (action.user_id) {
          logtext += "User = " + action.user_id + "\n";
        }
        if (action.id) {
          logtext += "Action ID = " + action.id + "\n";
        }
        return console.log(logtext + err);
      }
    };

    TrelloView.prototype.recent_actions = function(alldata, board_id) {
      var actions, len, size, sorted,
        _this = this;
      actions = _.filter(alldata.actions, function(action) {
        return action.data.board.id === board_id;
      });
      sorted = _.sortBy(actions, function(action) {
        return (new Date(action.date)).getTime();
      });
      len = sorted.length;
      if (len < 5) {
        size = len;
      } else {
        size = 5;
      }
      return (sorted.slice(sorted.length - size, len)).reverse();
    };

    TrelloView.prototype.renderHtml = function(trellos, user, fn) {
      var user_id,
        _this = this;
      user_id = new ObjectID(user._id.toString());
      return trellos.get_all_data(user_id, function(err, all) {
        var htmls, orgs, ret, wtf;
        if (err) {
          return fn(500, all);
        } else {
          htmls = [];
          wtf = _this.collect_cards_per_due(all.cards, user.tzdiff);
          htmls.push('<h5><i>Due Today</i></h5>');
          htmls.push(_this.list_cards_dueform(all, wtf.today, user.tzdiff));
          htmls.push('<h5><i>Due Soon</i></h5>');
          htmls.push(_this.list_cards_dueform(all, wtf.soon, user.tzdiff));
          htmls.push('<h5><i>Past Due</i></h5>');
          htmls.push(_this.list_cards_dueform(all, wtf.past, user.tzdiff));
          ret = htmls.join("\n");
          orgs = _this.all_org_names(all);
          ret += "<br><h4>Recent Activities</h4>";
          _.each(orgs, function(org) {
            var boards_for_org;
            boards_for_org = _.filter(all.boards, function(bd) {
              return bd.org_name === org;
            });
            return _.each(boards_for_org, function(board) {
              var actions;
              ret += "<br><h4><i>Board: " + org + " / " + board.boards.name + "</i></h4>";
              actions = _this.recent_actions(all, board.boards.id);
              return _.each(actions, function(a) {
                return ret += _this.render_action(a, user.tzdiff);
              });
            });
          });
          ret += "<br><h4>Boards Snapshot</h4>";
          _.each(orgs, function(org) {
            var boards_for_org;
            boards_for_org = _.filter(all.boards, function(bd) {
              return bd.org_name === org;
            });
            return _.each(boards_for_org, function(board) {
              var lists;
              lists = _.filter(all.lists, function(list) {
                return list.board_id === board.boards.id;
              });
              ret += "<br><h4><i>Board: " + org + " / " + board.boards.name + "</i></h4>";
              return _.each(lists, function(lists) {
                return ret += _this.list_tabular(all, lists, user.tzdiff);
              });
            });
          });
          ret += "<br>";
          return fn(null, ret);
        }
      });
    };

    TrelloView.prototype.getSummary = function(user, fn) {
      var trellos;
      trellos = new Trellos();
      return this.renderHtml(trellos, user, fn);
    };

    TrelloView.prototype.is_due_soon = function(card, limit) {
      var diff, due, minutes, now;
      if (card.due === null) {
        return false;
      } else {
        due = new Date(card.due);
        now = new Date();
        diff = due.getTime() - now.getTime();
        minutes = Math.abs(diff / 1000 / 60);
        if (minutes < limit) {
          return true;
        } else {
          return false;
        }
      }
    };

    TrelloView.prototype.card_due_notification = function(alldata, lists, tzdiff) {
      var htmls,
        _this = this;
      htmls = [];
      _.each(lists.lists, function(list) {
        var cards;
        cards = _this.lookup_cards_by_listid(alldata, list.id);
        if (!_.isUndefined(cards)) {
          return _.each(cards.cards, function(card) {
            var aboard, context, due, duedate, members;
            if (_this.is_due_soon(card, 15)) {
              aboard = _this.lookup_board_by_id(alldata, cards.board_id);
              members = _this.card_member(alldata, card);
              due = Date.create(card.due).addHours(tzdiff);
              duedate = due.format("{Mon} {d}, {yyyy} at {h}:{mm} {TT}");
              context = {
                board_name: aboard.boards.name,
                board_url: aboard.boards.url,
                org_name: aboard.org_name,
                list_name: list.name,
                list_url: "",
                card_name: card.name,
                card_url: card.url,
                due: duedate,
                assigned_to: members
              };
              return htmls.push(TrelloView.templates.duecard.template(context));
            }
          });
        }
      });
      if (htmls.length > 0) {
        return htmls.join('\n');
      } else {
        return null;
      }
    };

    TrelloView.prototype.all_card_due_notifications = function(all, user, fn) {
      var orgs, ret,
        _this = this;
      ret = '';
      orgs = this.all_org_names(all);
      _.each(orgs, function(org) {
        var boards_for_org;
        boards_for_org = _.filter(all.boards, function(bd) {
          return bd.org_name === org;
        });
        return _.each(boards_for_org, function(board) {
          var lists;
          lists = _.filter(all.lists, function(list) {
            return list.board_id === board.boards.id;
          });
          return _.each(lists, function(lists) {
            var dd;
            dd = _this.card_due_notification(all, lists, user.tzdiff);
            if (dd !== null) {
              return ret += ("<br><h4><i>Board: " + org + " / " + board.boards.name + "</i></h4>") + dd;
            }
          });
        });
      });
      return ret;
    };

    return TrelloView;

  })();

}).call(this);
