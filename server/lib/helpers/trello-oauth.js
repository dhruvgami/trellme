// Generated by CoffeeScript 1.6.3
(function() {
  var OAuth, TrelloOAuth, Users, config, fs, http, _;

  _ = require('underscore');

  OAuth = require('oauth').OAuth;

  fs = require("fs");

  http = require('http');

  Users = require('../models/users');

  config = JSON.parse(fs.readFileSync("config/config.json"));

  module.exports = TrelloOAuth = (function() {
    TrelloOAuth.prototype.oauth = null;

    TrelloOAuth.prototype.oauth_token = null;

    TrelloOAuth.prototype.oauth_token_secret = null;

    TrelloOAuth.prototype.user_id = null;

    function TrelloOAuth(user_id) {
      this.user_id = user_id;
    }

    TrelloOAuth.prototype.createOAuth = function(fn) {
      var callback;
      callback = "http://" + config.api_host + "/app/auths/trello_callback?state=" + this.user_id;
      this.oauth = new OAuth(config.trello.requestURL, config.trello.accessURL, config.trello.key, config.trello.secret, "1.0", callback, "HMAC-SHA1");
      console.log("createOAuth success");
      return fn(null, this.oauth);
    };

    TrelloOAuth.prototype.requestToken = function(fn) {
      var _this = this;
      console.log("requestToken entered");
      return this.oauth.getOAuthRequestToken(function(error, token, tokenSecret, results) {
        if (error) {
          console.log("requestTOken getOAuthRequestToken error");
          return fn(error.statusCode, error.data);
        } else {
          console.log("requestTOken getOAuthRequestToken good");
          _this.oauth_token = token;
          _this.oauth_token_secret = tokenSecret;
          return (new Users()).save_token_secret(_this.user_id, tokenSecret, function(err) {
            if (!err) {
              return fn(null, "" + config.trello.authorizeURL + "?oauth_token=" + token + "&name=" + config.trello.appName + "&expires=never");
            } else {
              return console.log('save_token_secret failed');
            }
          });
        }
      });
    };

    TrelloOAuth.prototype.callbackCalled = function(oauth, query, fn) {
      var users,
        _this = this;
      console.log(query);
      users = new Users();
      return users.get(query.state, function(err, user) {
        var token, tokenSecret, verifier;
        if (err) {
          console.log("callbackCalled: user could not be found");
          fn(500, "callbackCalled: user could not be found");
          return;
        }
        token = query.oauth_token;
        tokenSecret = user.token_secret;
        verifier = query.oauth_verifier;
        return oauth.getOAuthAccessToken(token, tokenSecret, verifier, function(error, access_token, access_token_secret, results) {
          var values;
          if (error) {
            return fn(500, 'OAuth.getOAuthAccessToken() failed');
          } else {
            values = {
              access_token: access_token,
              access_token_secret: access_token_secret
            };
            return users.save_access_token(_this.user_id, values, function(err) {
              if (err) {
                return fn(500, 'Users.save_access_token failed');
              } else {
                return fn(null, 'all good');
              }
            });
          }
        });
      });
    };

    return TrelloOAuth;

  })();

}).call(this);
