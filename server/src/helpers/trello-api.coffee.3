#
# trello-api.coffee
#
#  Trello API accessors
#
# 
_     = require 'underscore'
fs    = require("fs")
https = require('https')
Users = require('../models/users')
Trellos = require('../models/trellos')
should = require('should')
ObjectID = require('mongodb').ObjectID
async = require 'async'



config = JSON.parse(fs.readFileSync("config/config.json"))

String.prototype.replaceAll = (params) ->
    return this.replace /{[^{}]+}/g, (key) ->
        return params[key.replace(/[{}]+/g, "")] || ""


module.exports = class TrelloApi
    @host: 'api.trello.com'

    # Abstractified API names
    @endpoints : {
        'public_boards' :       { method: 'GET',  path: '/1/members/{username}/boards?key={key}&token={token}' }
        'organizations' :       { method: 'GET',  path: '/1/members/{username}/organizations?key={key}&token={token}' }
        #'org_boards' :          { method: 'GET',  path: '/1/organizations/mindsburgh1/boards?key={key}&token={token}' }
        'org_boards' :          { method: 'GET',  path: '/1/organizations/{orgname}/boards?key={key}&token={token}' }                
        'all_lists_of_board' :  { method: 'GET',  path: '/1/boards/{board_id}/lists?key={key}&token={token}' }
        'all_cards_of_list' :   { method: 'GET',  path: '/1/lists/{list_id}/cards?key={key}&token={token}' }
        'checklist_of_card':    { method: 'GET',  path: '/1/checklists/{checklist_id}?key={key}&token={token}' }
    }
    
    #
    # Initialize
    # 
    constructor: ()->
        @
    
    #
    # Execute API request
    # 
    #  paramObj: params if any like card_id, board_id, list_id, etc
    #  userObj: an user entry from users collection.
    #  
    request: (action, userObj, paramObj, fn)->
        console.log(action)
        if typeof TrelloApi.endpoints[action] is 'undefined'
            fn(500, "No such action")

        keys = _.keys(paramObj)
        params = {}
        _.each keys, (key) ->
            params[key] = paramObj[key]
        # Must have done OAuth authentiation
        should.exist userObj.trello_username
        should.exist userObj.access_token

        # Common params
        params.username = userObj.trello_username
        params.key      = config.trello.key
        params.token    = userObj.access_token
        #console.log(params)
        
        # Replace the api url variables
        path = TrelloApi.endpoints[action].path.replaceAll(params)
        console.log(path)

        # pstr is for POST only
        pstr = ''
        length = Buffer.byteLength(pstr, 'utf8')
        opts =
            host: TrelloApi.host
            path:  path
            method: TrelloApi.endpoints[action].method
            headers:
                'User-Agent': 'My Trello Bot'
                'Accept': 'application/json, Text/javascript, */*; q=0.01'
                'Content-Type': 'application/x-www-form-urlencoded'
                'Content-Length': length
        #console.log(opts)
        
        request = https.request opts, (resp) ->
            #console.log("statusCode: ", resp.statusCode)
            resp.setEncoding('utf8')
            data = ''
            # On data
            resp.on 'data', (chunk) ->
                data += chunk
            # On end
            resp.on 'end', () ->
                #console.log(data)
                fn(null, data)
            # On error
            resp.on 'error', (e) ->
                console.log('error of some kind '+e)
                fn(500, 'error')
        request.write(pstr)
        request.end()

    #
    _parse: (json) ->
        try
            obj = JSON.parse(json)
        catch err
            console.log('JSON Parse Error '+json)
            obj = {}
        obj

    #
    # Collect all Trello data for a user
    #  testurl http://localhost:3000/app/trello/collect/test1@yahoo.com
    # 
    # Scenario
    #
    #  Get all boards 
    #   -> list of board IDs
    #      foreach board in boards 
    #         get lists
    #         foreach list in lists
    #            get cards
    #            foreach card in cards
    #               get checklists
    # Data will be saved in the database
    # colection : boards, lists, cards, checklists
    # 
    collect_data_async: (userObj, fn)->
        db_trellos = new Trellos()
        uid = new ObjectID(userObj._id.toString())
        db_trellos.clear_all uid, (err, wtf)=>
            if err
                return fn(500, wtf)
            # Get all BOARDS
            @request 'public_boards', userObj, {}, (err, json) =>
                if err
                    return fn(500, json)
                # Save BOARDS data
                boards = @_parse(json)
                db_trellos.save_boards uid, boards, (err, wtf)=>
                    if err
                        return fn(500,wtf)

                    # Get all LISTS
                    _.each boards, (board) =>
                        @request 'all_lists_of_board', userObj, {board_id: board.id}, (err, json) =>
                            if err
                                return fn(500, json)
                            # Save LISTS of a board data
                            lists = @_parse(json)
                            db_trellos.save_lists uid, board.id, lists, (err, wtf)=>
                                if err
                                    return fn(500,wtf)
                                # Get all CARDS
                                _.each lists, (list)=>
                                    @request 'all_cards_of_list', userObj, {list_id: list.id}, (err, json) =>
                                        if err
                                            return fn(500, json)
                                        # Save CARDS of a list data
                                        cards = @_parse(json)
                                        db_trellos.save_cards uid, board.id, list.id, cards, (err, wtf)=>
                                            if err
                                                return fn(500, wtf)
                                            # Now save the CHECKLIST data
                                            _.each cards, (card)=>
                                                _.each card.idChecklists, (checklistid) =>
                                                    @request 'checklist_of_card', userObj, {checklist_id: checklistid}, (err, json) =>
                                                        if err
                                                            return fn(500, json)
                                                        checklists = @_parse(json)
                                                       db_trellos.save_checklists uid, board.id, list.id, card.id, checklists, (err, wtf)=>
                                                            if err
                                                                return fn(500,wtf)
                    # This make this function leave while its running to get data
                    fn(null, 'all good')  # at the end of each boards loop

    #
    # Read organization boards and public boards for the user 
    # 
    # 
    get_all_boards: (db, userObj, fn)->
        #
        # Get all organization names
        # 
        @request 'organizations', userObj, {}, (err, json) =>
            if err
                return fn(500, json)
            orgs = @_parse(json)  # organizations array
            uid = new ObjectID(userObj._id.toString())
            allboards = []
            async.each( orgs, (org, cb) =>
                #
                # Get organization boards
                # 
                @request 'org_boards', userObj, {orgname:org.name}, (err, json) =>
                    boards = @_parse(json)  # Boards belongs to the organization
                    # boards is an array.
                    # Store boards individually
                    async.each( boards, (board, cb1) =>
                        bb = _.find allboards, (bd) =>
                            board.id is bd.id
                        if typeof bb is 'undefined'
                            allboards.push board
                        cb1(null)
                    , (err)=>
                        # Save data into db. Pass org name
                        db.save_boards uid, org.name, boards, (err, wtf)=>
                            if err
                                return fn(500,wtf)
                            cb(null)
                    )
            , (err) =>
                #
                # Finally read all public board data
                # 
                @request 'public_boards', userObj, {}, (err, json) =>
                    if err
                        return fn(500, json)
                    boards = @_parse(json)
                    # Store boards individually
                    async.each( boards, (board, cb2) =>
                        bb = _.find allboards, (bd) =>
                            board.id is bd.id
                        if typeof bb is 'undefined'
                            allboards.push board
                        cb2(null)
                    , (err) =>
                        db.save_boards uid, "public", boards, (err, wtf)=>
                            if err
                                return fn(500,wtf)                
                            #console.log(allboards)
                            fn(null, allboards)
                    )
            )

    #
    get_public_boards: (db, userObj, fn)->
        @request 'public_boards', userObj, {}, (err, json) =>
            if err
                return fn(500, json)
            boards = @_parse(json)
            uid = new ObjectID(userObj._id.toString())
            db.save_boards uid, "public", boards, (err, wtf)=>
                if err
                    return fn(500,wtf)                
                fn(null, boards)

    #
    get_all_lists_of_board: (db,userObj, board, fn)->
        @request 'all_lists_of_board', userObj, {board_id: board.id}, (err, json) =>
            if err
                return fn(500, json)
            lists = @_parse(json)
            uid = new ObjectID(userObj._id.toString())
            db.save_lists uid, board.id, lists, (err, wtf)=>
                if err
                    return fn(500,wtf)            
                fn(null, lists)

    #
    get_all_cards_of_list: (db, userObj, board_id, list, fn) ->
        @request 'all_cards_of_list', userObj, {list_id: list.id}, (err, json) =>
            if err
                return fn(500, json)
            cards = @_parse(json)
            uid = new ObjectID(userObj._id.toString())
            db.save_cards uid, board_id, list.id, cards, (err, wtf)=>
                if err
                    return fn(500, wtf)            
                fn(null, cards)

    #
    get_checklist_of_card: (db, userObj, board_id, list_id, card_id, checklistid, fn) ->
        @request 'checklist_of_card', userObj, {checklist_id: checklistid}, (err, json) =>
            if err
                return fn(500, json)
            checklists = @_parse(json)
            uid = new ObjectID(userObj._id.toString())
            db.save_checklists uid, board_id, list_id, card_id, checklists, (err, wtf)=>
                if err
                    return fn(500,wtf)            
                fn(null, checklists)

    #
    # async used
    # 
    collect_data_sync: (userObj, fn)->
        db = new Trellos()
        uid = new ObjectID(userObj._id.toString())

        db.clear_all uid, (err, wtf)=>
            if err
                return fn(500, wtf)
            # Get all BOARDS
            @get_all_boards db, userObj, (err, boards)=>
                #
                # Get all LISTS
                # 
                async.each( boards, (board, cb1)=>
                    @get_all_lists_of_board db, userObj, board, (err, lists)=>
                        #
                        # Get all CARDS
                        #
                        async.each( lists, (list, cb2)=>
                            @get_all_cards_of_list db, userObj, board.id, list, (err, cards) =>
                                #
                                # Now save the CHECKLIST data
                                # 
                                _.each cards, (card) =>
                                    #
                                    # Forther loop for checklists
                                    # 
                                    async.each( card.idChecklists, (checklistid, cb4) =>
                                        @get_checklist_of_card db, userObj, "0", "0", card.id, checklistid, (err, checklist) =>
                                            cb4(null)
                                            console.log("Done 4")                                            
                                    , (err) =>
                                        console.log("Done 3")                                        
                                    )
                                cb2(null)
                                console.log("Done 2")
                        )
                        cb1(null)
                        console.log("Done 1")
                ,(err)=>
                    console.log('All done. ');
                    fn(null, 'all good')  # at the end of each boards loop
                )

    #
    test: (userObj, alldata, fn)->
        a = [1,2,3,4,5,6,7,8,9,10]
        sent = ""
        async.each(a, (i, callback)->
            setTimeout( ()->
                console.log 'hello world: ' + i
                callback()
            , 1000)
        , (err)->
            if err
                throw err
            console.log('done')
            fn(null, 'wtf')
        )


